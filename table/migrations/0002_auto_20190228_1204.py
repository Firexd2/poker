# Generated by Django 2.0.4 on 2019-02-06 15:18

from django.db import migrations


class Migration(migrations.Migration):

    dependencies = [
        ('table', '0001_initial'),
    ]

    operations = [
    ]

from django.db import migrations

from core.mixins.utils.mixins import name_to_url

default_names_sites = ('POKER STARS', '888 POKER', 'WINNING', 'IPOKER')
default_names_limits = (
    'NL2', 'NL4/5', 'NL10', 'NL16', 'NL20/25', 'NL30', 'NL50', 'NL100', 'NL200', 'NL400/500', 'NL600', 'NL1000'
)
default_names_tables = ("No-Limit Hold'em", "Fixed-Limit Hold'em", "Pot-Limit Omaha")


def create_default_tables(apps, schema_editor):
    """Заполняем таблицу дефолтными данными
    """
    Site = apps.get_model('table', 'Site')
    LimitItem = apps.get_model('table', 'LimitItem')
    Limit = apps.get_model('table', 'Limit')
    Table = apps.get_model('table', 'Table')

    def _create_default_limits():
        result = []
        # заполняем дефолтную таблицу, ценник на итем выставляем 10
        for i, limit_name in enumerate(default_names_limits, start=1):
            limit = Limit.objects.create(priority=i, name=limit_name)

            limit_items = []
            for site_obj in sites[table.name]:
                limit_item = LimitItem.objects.create(site=site_obj, price=10)
                limit_items.append(limit_item)

            limit.items.add(*limit_items)
            result.append(limit)

        return result

    # создаем сайты (для каждой таблицы свои)
    sites = {}
    for table_name in default_names_tables:
        sites[table_name] = []
        for i, site_name in enumerate(default_names_sites, start=1):
            site = Site.objects.create(priority=i, name=site_name)
            sites[table_name].append(site)

    # создаем столы и их лимиты
    for i, table_name in enumerate(default_names_tables, start=1):
        table = Table.objects.create(priority=i, name=table_name, name_url=name_to_url(table_name))

        limits = _create_default_limits()
        table.limits.add(*limits)


def reverse(apps, schema_editor):
    pass


class Migration(migrations.Migration):
    dependencies = [
        ('table', '0001_initial'),
    ]
    operations = [
        migrations.RunPython(create_default_tables, reverse),
    ]
